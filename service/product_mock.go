// Code generated by MockGen. DO NOT EDIT.
// Source: service/store.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	domain "github.com/Tambarie/online-store/domain/store"
	gomock "github.com/golang/mock/gomock"
)

// MockStoreService is a mock of StoreService interface.
type MockStoreService struct {
	ctrl     *gomock.Controller
	recorder *MockStoreServiceMockRecorder
}

// MockStoreServiceMockRecorder is the mock recorder for MockStoreService.
type MockStoreServiceMockRecorder struct {
	mock *MockStoreService
}

// NewMockStoreService creates a new mock instance.
func NewMockStoreService(ctrl *gomock.Controller) *MockStoreService {
	mock := &MockStoreService{ctrl: ctrl}
	mock.recorder = &MockStoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreService) EXPECT() *MockStoreServiceMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockStoreService) CreateProduct(product *domain.Products) (*domain.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", product)
	ret0, _ := ret[0].(*domain.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreServiceMockRecorder) CreateProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStoreService)(nil).CreateProduct), product)
}

// DeleteProduct mocks base method.
func (m *MockStoreService) DeleteProduct(reference string, products *domain.Products) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", reference, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStoreServiceMockRecorder) DeleteProduct(reference, products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStoreService)(nil).DeleteProduct), reference, products)
}

// FilterProductsByProperties mocks base method.
func (m *MockStoreService) FilterProductsByProperties(price float64, name, status string) ([]domain.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterProductsByProperties", price, name, status)
	ret0, _ := ret[0].([]domain.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterProductsByProperties indicates an expected call of FilterProductsByProperties.
func (mr *MockStoreServiceMockRecorder) FilterProductsByProperties(price, name, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterProductsByProperties", reflect.TypeOf((*MockStoreService)(nil).FilterProductsByProperties), price, name, status)
}

// GetProductDetails mocks base method.
func (m *MockStoreService) GetProductDetails(reference string) (*domain.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductDetails", reference)
	ret0, _ := ret[0].(*domain.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductDetails indicates an expected call of GetProductDetails.
func (mr *MockStoreServiceMockRecorder) GetProductDetails(reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductDetails", reflect.TypeOf((*MockStoreService)(nil).GetProductDetails), reference)
}

// ListAllProducts mocks base method.
func (m *MockStoreService) ListAllProducts() ([]domain.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllProducts")
	ret0, _ := ret[0].([]domain.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllProducts indicates an expected call of ListAllProducts.
func (mr *MockStoreServiceMockRecorder) ListAllProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllProducts", reflect.TypeOf((*MockStoreService)(nil).ListAllProducts))
}

// UpdateProducts mocks base method.
func (m *MockStoreService) UpdateProducts(reference string, products *domain.Products) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProducts", reference, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProducts indicates an expected call of UpdateProducts.
func (mr *MockStoreServiceMockRecorder) UpdateProducts(reference, products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProducts", reflect.TypeOf((*MockStoreService)(nil).UpdateProducts), reference, products)
}
